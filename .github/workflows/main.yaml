# .github/workflows/docker-build.yml

# This workflow automates a CI/CD pipeline with four stages:
# 1. Test: Runs Go unit tests.
# 2. Build: Creates a single-platform Docker image.
# 3. Publish: Pushes the image to Docker Hub.
# 4. Deploy: Deploys the new image to a Google Cloud Platform VM.

name: CI/CD Pipeline

on:
  push:
    branches:
      - main

# Define environment variables for the workflow.
# This makes the script more readable and easier to manage.
env:
  DOCKER_IMAGE_NAME: weather-app
  DOCKER_REPO: noufeldocker77417
  GCP_VM_IP: 34.67.209.88

jobs:
  test:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22.4'

      - name: Run Go tests
        run: go test -v ./...

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test # This job will only run if the 'test' job succeeds.
    outputs:
      image_tag: ${{ github.sha }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        id: build-image
        uses: docker/build-push-action@v5
        with:
          context: .
          # We're now building for a single platform, so the default is used.
          push: false
          # Tag the image with the short SHA for local use.
          tags: ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}
          # Save the image to a tarball using the 'docker' exporter.
          outputs: type=docker,dest=/tmp/${{ env.DOCKER_IMAGE_NAME }}.tar

      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: /tmp/${{ env.DOCKER_IMAGE_NAME }}.tar

  publish:
    name: Publish Docker Image
    runs-on: ubuntu-latest
    needs: build # This job will only run if the 'build' job succeeds.
    steps:
      - name: Download Docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: /tmp

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Load image from tarball and push
        run: |
          # Load the image from the tarball
          docker load --input /tmp/${{ env.DOCKER_IMAGE_NAME }}.tar

          # Tag the image with the correct repository name and version
          docker tag ${{ env.DOCKER_IMAGE_NAME }}:${{ needs.build.outputs.image_tag }} ${{ env.DOCKER_REPO }}/${{ env.DOCKER_IMAGE_NAME }}:${{ needs.build.outputs.image_tag }}
          docker tag ${{ env.DOCKER_IMAGE_NAME }}:${{ needs.build.outputs.image_tag }} ${{ env.DOCKER_REPO }}/${{ env.DOCKER_IMAGE_NAME }}:latest

          # Push both the SHA and latest tags
          docker push ${{ env.DOCKER_REPO }}/${{ env.DOCKER_IMAGE_NAME }}:${{ needs.build.outputs.image_tag }}
          docker push ${{ env.DOCKER_REPO }}/${{ env.DOCKER_IMAGE_NAME }}:latest

  deploy:
    name: Deploy to GCP VM
    runs-on: ubuntu-latest
    needs: publish # This job will now only run after the 'publish' job succeeds.
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Use SSH to connect and deploy the app.
      - name: Deploy to GCP VM
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ env.GCP_VM_IP }}
          username: your-ssh-user # Replace with your SSH username
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            sudo docker pull ${{ env.DOCKER_REPO }}/${{ env.DOCKER_IMAGE_NAME }}:latest
            sudo docker stop ${{ env.DOCKER_IMAGE_NAME }} || true
            sudo docker rm ${{ env.DOCKER_IMAGE_NAME }} || true
            sudo docker run -d --name ${{ env.DOCKER_IMAGE_NAME }} ${{ env.DOCKER_REPO }}/${{ env.DOCKER_IMAGE_NAME }}:latest